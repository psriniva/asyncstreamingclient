HOW TO BUILD:

0.  Install SystemInfo.
git clone https://github.com/psriniva/SystemInfo.git
mvn compile
mvn install -Dmaven.test.skip=true

1. Make sure you have 64 bit Java 7.

2. clone the project:

git clone https://github.com/psriniva/asyncstreamingclient.git
Initialized empty Git repository in /home/psrinivasan/tmp/asyncstreamingclient/.git/
remote: Counting objects: 949, done.
remote: Compressing objects: 100% (442/442), done.
remote: Total 949 (delta 380), reused 947 (delta 378)
Receiving objects: 100% (949/949), 668.66 KiB | 773 KiB/s, done.
Resolving deltas: 100% (380/380), done.


3.  mvn install:install-file -Dfile=lib/Smc.jar -DgroupId=org.myownsmcjar -DartifactId=my_smc -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true


4.
mvn compile
mvn jar:jar
mvn dependency:copy-dependencies


5.  Now you should have a correctly installed program.
 Next, you need a config.properties file and a logging.properties file which will tell the load generator what to do.
 See config.properties and logging.properties.

6. more on config.properties: http_client.max.concurrency controls the absolute concurrency of stress test.
max.handshake.concurrency controls handshake concurrency only.  We're worried about handshakes overwhelming the system.
producer.handshake.count is a way to specify how many users we want in the system.  The user specifications are read
from a file referred to by sessions.file

The format of the sessions.file pointer is a set of lines that look like:
username@myorg.org,mypassword,https://ist3.soma.salesforce.com,00530000006yXzy,ROLE,Profile,00D30000001IXN9!AQcAQKMAxuzTPj8yeaoDw9HgXybXZKg9qaPHWpeSmqFHbE9RA0cCMO5Iq.2AzMfCcMBxRSh38VMyRIey4mRSO8BB3uni2tZ4,/topic/PollNotice1?CreatedById=00530000006yXzyAAE

So the password field doesnt really matter.(This file have a lot of evolutionary vestiges).  But you need to specify
the server url, session id, and the topic name (if you're using filters).  If you're not using filters the last column
is not necessary, just set "per_user_topics = false" and specify your topic using the "channels" property.

7. invoke the program by running
 thunderingherd.sh <relative or absolute path to the directory that contains config.properties and logging.properties>

And that's it.  You are now able to generate streaming load.
=================


System Settings:
It's critical to have a godo file descriptor limit:
sysctl -w fs.file-max=250000

psrinivasan@psrinivasan-wsl1:~$ ulimit -n
8192
psrinivasan@psrinivasan-wsl1:~$ ulimit -Hn
100000
psrinivasan@psrinivasan-wsl1:~$ ulimit -n 99999

in /etc/security/limits.conf

psrinivasan soft nofile 200000
psrinivasan hard nofile 200000

And to have a god enough port range:
sysctl net.ipv4.ip_local_port_range

and set to
echo 1024 65535 > /proc/sys/net/ipv4/ip_local_port_range
or
sudo sysctl -w net.ipv4.ip_local_port_range="1024 64000"

and to persist - type into /etc/sysctl.conf
net.ipv4.ip_local_port_range = 1024 65535

In order to run the handshakes stress test, use the target

mvn package
mvn exec:exec

Other interesting mvn targets:
mvn compile
mvn test
mvn package

to create a set of jars for distribution:
mvn jar:jar
mvn dependency:copy-dependencies


To generate a fresh version of the FSM, navigate to the smc directory and issue the following command:
java -jar <path_to>/Smc.jar -sync -java StreamingClientFSM.sm
java -jar ~/projects/smc/bin/Smc.jar -sync -java StreamingClientFSM.sm

To generate a html table:
java -jar ~/projects/smc/bin/Smc.jar -table StreamingClientFSM.sm

To generate a debug class:
java -jar ~/projects/smc/bin/Smc.jar -g1 -sync -java StreamingClientFSM.sm



mvn install:install-file
  -Dfile=lib/Smc.jar
  -DgroupId=org.myownsmcjar
  -DartifactId=my_smc
  -Dversion=1.0
  -Dpackaging=jar
  -DgeneratePom=true


TODO: implement a client abstraction that allows for a handler to store session ids and usernames and appropriately log them.
TODO:  implement state management for clients
TODO:  more readme material.
TODO:  BUG: if connect receives an unknown client error, the client goes into the Connected state.
SEVERE: Request failed. State is: FSM.Connected Response is: [{"channel":"/meta/connect","clientId":"1xe7ep1w4t7b6797gccgddoj4c2","advice":{"reconnect":"handshake","interval":500},"error":"402::Unknown client","successful":false}]
TODO:  Make sure concurrency permits are appropriately released in error conditions
